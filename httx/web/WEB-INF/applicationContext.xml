<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <!-- Root Context: defines shared resources visible to all other web components -->

    <!-- Configurer that replaces ${...} placeholders with values from properties 
        files -->
    <!-- (in this case, JDBC and LAA related properties) -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>/WEB-INF/jdbc.properties</value>
                <value>/WEB-INF/sysconfig.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="sprintUtil" class="com.ht.util.SpringUtil" />

    <!-- Local Apache Commons DBCP DataSource that refers to a combined database -->
    <!-- The placeholders are resolved from jdbc.properties through -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
    </bean>
    
    
    <!-- Transaction manager for a single JDBC DataSource -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- enable component scanning (beware that this does not enable mapper 
        scanning!) -->
    <context:component-scan base-package="com.ht">
        <context:exclude-filter type="regex"
            expression="com.ht.controller.*" />
    </context:component-scan>

    <!-- enable autowire -->
    <context:annotation-config />

    <!-- This marker creates the full auto-proxy infrastructure that is necessary 
        for applying Spring's Transactional annotation. By default, it will refer 
        to the transaction manager bean named "transactionManager". -->
    <tx:annotation-driven />

    <!-- mybatis configuration -->
    <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.ht.model" />
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ht.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>    
    
    <bean id="config" class="com.ht.util.Config">
        <property name="exportPath">
            <value>${exportPath}</value>
        </property>
        <property name="templateFolder">
            <value>${templateFolder}</value>
        </property>
        <property name="goodsHGTemplateFileName">
            <value>${goodsHGTemplateFileName}</value>
        </property>
        <property name="goodsCheckTemplateFileName">
            <value>${goodsCheckTemplateFileName}</value>
        </property>
        
        <property name="eOrderHGTemplateFileName">
            <value>${eOrderHGTemplateFileName}</value>
        </property>
        <property name="eTransportHGTemplateFileName">
            <value>${eTransportHGTemplateFileName}</value>
        </property>
        <property name="pickGoodsTemplateFileName">
            <value>${pickGoodsTemplateFileName}</value>
        </property>
        <property name="importListHGTemplateFileName">
            <value>${importListHGTemplateFileName}</value>
        </property>
        <property name="importListCheckTemplateFileName">
            <value>${importListCheckTemplateFileName}</value>
        </property>
        <property name="intEntRepotHGTemplate">
            <value>${intEntRepotHGTemplate}</value>
        </property>
        <property name="intEntRepotCheckTemplate">
            <value>${intEntRepotCheckTemplate}</value>
        </property>
        <property name="importIntEntRepotFolder">
            <value>${importIntEntRepotFolder}</value>
        </property>
         <property name="loadingHGTemplate">
            <value>${loadingHGTemplate}</value>
        </property>
         <property name="loadingCheckTemplate">
            <value>${loadingCheckTemplate}</value>
        </property>
        <property name="storageExportTemplate">
            <value>${storageExportTemplate}</value>
        </property>
        <property name="goodsImportTemplate">
            <value>${goodsImportTemplate}</value>
        </property>
        <property name="importGoodsFolder">
            <value>${importGoodsFolder}</value>
        </property>
        <property name="orderExportReportTemplate">
            <value>${orderExportReportTemplate}</value>
        </property>
        <property name="transactionReportTemplate">
            <value>${transactionReportTemplate}</value>
        </property>
        <property name="goodsRegisterReport">
            <value>${goodsRegisterReport}</value>
        </property>
        <property name="orderStatusExportReportTemplate">
            <value>${orderStatusExportReportTemplate}</value>
        </property>
        <property name="recIncomOrder">
            <value>${recIncomOrder}</value>
        </property>
        <property name="idCardImgFolder">
            <value>${idCardImgFolder}</value>
        </property>
    </bean>
</beans>